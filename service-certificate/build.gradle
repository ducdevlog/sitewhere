description = 'SiteWhere Certificate Microservice'

dependencies {
    compile project(':sitewhere-microservice')
    compile project(':sitewhere-grpc-client')

    compile group: 'org.springframework', name: 'spring-web'
    // Supported databases.
    compile project(':sitewhere-mongodb')
    compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.61'

}

apply plugin: 'org.springframework.boot'
springBoot {
    mainClassName = 'com.sitewhere.certificate.CertificateApplication'
}

// Keep original jar.
jar { enabled = true }

// Reclassify Spring Boot jar.
bootJar { classifier = 'boot' }

// Only publish thin jar.
apply plugin: 'maven-publish'
publishing {
    publications {
        mavenJava(MavenPublication) { from components.java }
    }
}

// Create a Dockerfile.
task dockerFile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: bootJar) {
    destFile = project.file('build/docker/Dockerfile')
    from "${rootProject.ext['docker.base.image']}"
    instruction "LABEL maintainer=${rootProject.ext['docker.maintainer']}"

    // Copy Spring Boot jar.
    copyFile("${project.name}-${project.version}-boot.jar", "/")

    // Run Java command to start application.
    if (!project.hasProperty("debug")) {
        defaultCommand 'java', '-Xmx512M', '-Xss384K', '-jar', "/${project.name}-${project.version}-boot.jar"
    } else {
        println "Generating DEBUG IMAGE for project ${project.name}"

        def jdwpPort = 8001
        def jmxPort = 1114

        // Set Env
        environmentVariable('JMX_HOST', '0.0.0.0')

        // Expose ports.
        exposePort jdwpPort
        exposePort jmxPort

        defaultCommand 'java', '-server', '-Xdebug', '-Dcom.sun.management.jmxremote.local.only=false', '-Dcom.sun.management.jmxremote.ssl=false', '-Dcom.sun.management.jmxremote.authenticate=false', "-Dcom.sun.management.jmxremote.port=${jmxPort}", "-Dcom.sun.management.jmxremote.rmi.port=${jmxPort}", '-Dcom.sun.management.jmxremote.host=0.0.0.0', '-Djava.rmi.server.hostname=0.0.0.0', "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${jdwpPort}", '-Xmx512M', '-Xss384K', '-jar', "/${project.name}-${project.version}-boot.jar"
    }
}

// Copy artifacts to Docker input folder.
task copyArtifactsToDocker(type: Copy, dependsOn: dockerFile) {
    from "${buildDir}/libs/${project.name}-${project.version}-boot.jar"
    into 'build/docker'
}

// Build an image from the Dockerfile.
task dockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')
    if (!project.hasProperty("debug")) {
        tags = ["${dockerRepository}/sitewhere/${project.name}:${version}"]
    } else {
        tags = ["${dockerRepository}/sitewhere/${project.name}:debug-${version}"]
    }
}

// Build an image from the Dockerfile with tag latest.
task dockerImageLatest(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')

    def primaryTag = ""
    def secondaryTag = ""

    if (!project.hasProperty("debug")) {
        primaryTag = "${dockerRepository}/sitewhere/${project.name}:${version}"
    } else {
        primaryTag = "${dockerRepository}/sitewhere/${project.name}:debug-${version}"
    }
    secondaryTag = "${dockerRepository}/sitewhere/${project.name}:latest"
    tags = [primaryTag, secondaryTag]
}

// Build an image from the Dockerfile with tag edge.
task dockerImageEdge(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: copyArtifactsToDocker) {
    inputDir = project.file('build/docker')

    def primaryTag = ""
    def secondaryTag = ""

    if (!project.hasProperty("debug")) {
        primaryTag = "${dockerRepository}/sitewhere/${project.name}:${version}"
    } else {
        primaryTag = "${dockerRepository}/sitewhere/${project.name}:debug-${version}"
    }
    secondaryTag = "${dockerRepository}/sitewhere/${project.name}:edge"
    tags = [primaryTag, secondaryTag]
}

// Push image to remote repository.
task dockerPush(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImage) {
    imageName = "${dockerRepository}/sitewhere/${project.name}".toString()
    tag = "${version}".toString()
}

// Push image to remote repository.
task dockerPushLatest(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImageLatest) {
    imageName = "${dockerRepository}/sitewhere/${project.name}".toString()
}

// Push image to remote repository.
task dockerPushEdge(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage, dependsOn: dockerImageEdge) {
    imageName = "${dockerRepository}/sitewhere/${project.name}".toString()
}
